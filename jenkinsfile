pipeline {
  agent none
  options {
    skipDefaultCheckout()
    timeout(time: 30, unit: 'MINUTES')
  }
  environment {
    GCP_PROJECT = 'dbdeep'
    GCS_BUCKET  = 'gs://dbdeep-fe'
    CDN_URL_MAP = 'dbdeep-load-balancer'
  }
  stages {
    stage('Checkout & Build') {
      agent { docker { image 'node:20-alpine' } }
      steps {
        checkout scm
        dir('frontend') {
          sh 'mkdir -p .npm-cache'
          sh 'npm install --cache .npm-cache'
          sh 'npm run build'
          stash name: 'dist', includes: 'dist/**'
        }
      }
    }

    stage('Deploy to GCS') {
      agent { docker { image 'google/cloud-sdk:slim' } }
      steps {
        unstash 'dist'
        withCredentials([file(credentialsId: 'gcp-service-account-json', variable: 'GCLOUD_KEY')]) {
          sh '''
            export CLOUDSDK_CONFIG=$WORKSPACE/.gcloud
            export HOME=$WORKSPACE

            gcloud auth activate-service-account --key-file="$GCLOUD_KEY"
            gcloud config set project $GCP_PROJECT

            gsutil -m rsync -r dist/ $GCS_BUCKET
          '''
        }
      }
    }

    stage('Invalidate CDN') {
      agent { docker { image 'google/cloud-sdk:slim' } }
      steps {
        withCredentials([file(credentialsId: 'gcp-service-account-json', variable: 'GCLOUD_KEY')]) {
          sh '''
            export CLOUDSDK_CONFIG=$WORKSPACE/.gcloud
            export HOME=$WORKSPACE

            gcloud auth activate-service-account --key-file="$GCLOUD_KEY"
            gcloud config set project $GCP_PROJECT

            gcloud compute url-maps invalidate-cdn-cache $CDN_URL_MAP \
              --global \
              --path '/*'
          '''
        }
      }
    }

    stage('Smoke Test') {
      agent { docker { image 'curlimages/curl:latest' } }
      steps {
        sh 'curl -f https://dbdeep.kr/ || exit 1'
      }
    }
  }

  post {
    success {
      echo "✅ 프론트 배포 성공: ${env.BUILD_URL}"
    }
    failure {
      echo "❌ 프론트 배포 실패: ${env.BUILD_URL}"
    }
  }
}
