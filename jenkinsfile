pipeline {
  agent none
  options {
    skipDefaultCheckout()
    timeout(time: 20, unit: 'MINUTES')
  }
  environment {
    GCP_PROJECT = 'dbdeep'
    GCS_BUCKET  = 'gs://dbdeep-fe'
    CDN_URL_MAP = 'dbdeep-load-balancer'
  }
  stages {
    stage('Checkout & Build') {
      agent { docker { image 'node:18-alpine' } }
      steps {
        checkout scm
        sh 'npm ci'
        sh 'npm run build'
        stash name: 'dist', includes: 'dist/**'
      }
    }
    stage('Deploy to GCS') {
      agent { docker { image 'google/cloud-sdk:slim' } }
      steps {
        withCredentials([file(credentialsId: 'gcp-service-account-json', variable: 'GCLOUD_KEY')]) {
          sh '''
            echo "$GCLOUD_KEY" > gcloud-key.json
            gcloud auth activate-service-account --key-file=gcloud-key.json
            gcloud config set project $GCP_PROJECT
          '''
          unstash 'dist'
          sh 'gsutil -m rsync -r dist/ $GCS_BUCKET'
        }
      }
    }
    stage('Invalidate CDN') {
      agent { docker { image 'google/cloud-sdk:slim' } }
      steps {
        withCredentials([file(credentialsId: 'gcp-service-account-json', variable: 'GCLOUD_KEY')]) {
          sh '''
            echo "$GCLOUD_KEY" > gcloud-key.json
            gcloud auth activate-service-account --key-file=gcloud-key.json
            gcloud config set project $GCP_PROJECT
          '''
          sh 'gcloud compute url-maps invalidate-cdn-cache $CDN_URL_MAP --path "/*"'
        }
      }
    }
    stage('Smoke Test') {
      agent { docker { image 'curlimages/curl:latest' } }
      steps {
        sh 'curl -f https://dbdeep.kr/ || exit 1'
      }
    }
  }
  post {
    success {
      echo "✅ 프론트 배포 성공: ${env.BUILD_URL}"
    }
    failure {
      echo "❌ 프론트 배포 실패: ${env.BUILD_URL}"
    }
  }
}
